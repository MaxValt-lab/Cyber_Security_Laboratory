name: DevSecOps Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Run ruff and mypy
        run: |
          ruff check .
          mypy common/src

  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Run bandit and safety
        run: |
          bandit -r common/src
          safety check --full-report

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Run pytest
        run: |
          pytest --cov=common/src --cov-report=term-missing

  sbom:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Generate SBOM
        run: |
          cyclonedx-py requirements -o sbom.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Scan secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -f deployment/docker/Dockerfile -t cyberlab:latest .
          
  make:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Run full Makefile pipeline
        run: |
          make all
          
          release:
              @echo "üî¢ Bumping version..."
              python tools/bump_version.py

              @echo "üìú Generating changelog..."
              git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md

              @echo "üè∑ Creating tag..."
              git add VERSION CHANGELOG.md
              git commit -m "chore(release): bump version and changelog"
              git tag -a v$(cat VERSION) -m "Release v$(cat VERSION)"
              git push origin master --tags
