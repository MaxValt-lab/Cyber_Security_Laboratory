"""
Генератор документации для системы
"""
import os
import ast
import json
from datetime import datetime

class DocumentationGenerator:
    def __init__(self):
        self.project_root = os.path.dirname(os.path.abspath(__file__))
        self.docs_dir = os.path.join(self.project_root, "docs")
        os.makedirs(self.docs_dir, exist_ok=True)
    
    def generate_api_docs(self):
        """Генерация API документации"""
        api_docs = {
            "title": "Director Management System API",
            "version": "1.0.0",
            "description": "API для системы управления директора",
            "endpoints": [
                {
                    "path": "/",
                    "method": "GET",
                    "description": "Главная страница входа",
                    "response": "HTML страница входа"
                },
                {
                    "path": "/dashboard",
                    "method": "GET", 
                    "description": "Панель управления директора",
                    "auth_required": True,
                    "response": "HTML панель управления"
                },
                {
                    "path": "/chat",
                    "method": "GET",
                    "description": "Чат с агентами",
                    "response": "HTML страница чата"
                },
                {
                    "path": "/api/login",
                    "method": "POST",
                    "description": "Аутентификация пользователя",
                    "parameters": {
                        "username": "string",
                        "password": "string"
                    },
                    "response": {
                        "success": "boolean",
                        "session_token": "string (if success)",
                        "error": "string (if failed)"
                    }
                }
            ]
        }
        
        with open(os.path.join(self.docs_dir, "api_documentation.json"), 'w', encoding='utf-8') as f:
            json.dump(api_docs, f, indent=2, ensure_ascii=False)
    
    def generate_security_docs(self):
        """Генерация документации по безопасности"""
        security_doc = """# Документация по безопасности

## Аутентификация
- **Многофакторная аутентификация**: Поддержка MFA для повышенной безопасности
- **Хеширование паролей**: PBKDF2 с SHA-256 и 100,000 итераций
- **Блокировка аккаунтов**: Автоматическая блокировка после 5 неудачных попыток
- **Управление сессиями**: Токены сессий с ограниченным временем жизни

## Шифрование данных
- **Алгоритм**: Fernet (AES 128 в режиме CBC)
- **Ключи**: Генерация через PBKDF2 с солью
- **Область применения**: Чувствительные данные в базе

## Аудит
- **Логирование**: Все действия пользователей записываются
- **Хранение**: SQLite база данных с временными метками
- **Мониторинг**: Отслеживание подозрительной активности

## Рекомендации
1. Регулярно обновляйте пароли
2. Используйте HTTPS в продакшене
3. Настройте файрвол для ограничения доступа
4. Регулярно создавайте резервные копии
5. Мониторьте журналы аудита

## Конфигурация безопасности
```python
# Настройки безопасности
MAX_FAILED_ATTEMPTS = 5
LOCKOUT_DURATION = 30  # минут
SESSION_TIMEOUT = 8    # часов
PASSWORD_MIN_LENGTH = 8
```
"""
        
        with open(os.path.join(self.docs_dir, "security.md"), 'w', encoding='utf-8') as f:
            f.write(security_doc)
    
    def generate_deployment_docs(self):
        """Генерация документации по развертыванию"""
        deployment_doc = """# Руководство по развертыванию

## Системные требования
- Python 3.7+
- Windows/Linux/macOS
- 512MB RAM минимум
- 1GB свободного места на диске

## Установка

### 1. Клонирование репозитория
```bash
git clone <repository_url>
cd security_laboratory
```

### 2. Установка зависимостей
```bash
pip install -r requirements.txt
```

### 3. Запуск системы
```bash
# Автоматическое развертывание
python deployment_automation.py

# Или ручной запуск
python simple_director_server.py
```

## Конфигурация

### Настройка базы данных
Система автоматически создает SQLite базы данных:
- `security.db` - данные безопасности
- `director_system.db` - данные директора
- `general_system.db` - общие данные

### Настройка портов
По умолчанию используется порт 8089. Для изменения:
```python
PORT = 8089  # в файле simple_director_server.py
```

## Мониторинг

### Проверка статуса
```bash
python deployment_automation.py
# Выберите опцию "4. Статус системы"
```

### Логи
- `logs/deployment_YYYYMMDD.log` - логи развертывания
- `logs/metrics_YYYYMMDD.json` - метрики системы

## Резервное копирование

### Автоматические бэкапы
Система создает автоматические бэкапы каждые 5 минут.

### Ручное создание бэкапа
```bash
python deployment_automation.py
# Выберите опцию "2. Создать бэкап"
```

### Восстановление
1. Остановите систему
2. Распакуйте бэкап в рабочую директорию
3. Запустите систему

## Безопасность в продакшене

### HTTPS
Настройте обратный прокси (nginx/Apache) с SSL:
```nginx
server {
    listen 443 ssl;
    server_name your-domain.com;
    
    ssl_certificate /path/to/cert.pem;
    ssl_certificate_key /path/to/key.pem;
    
    location / {
        proxy_pass http://localhost:8089;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

### Файрвол
```bash
# Разрешить только необходимые порты
ufw allow 22    # SSH
ufw allow 443   # HTTPS
ufw deny 8089   # Прямой доступ к приложению
```

## Устранение неполадок

### Порт занят
```bash
# Найти процесс на порту
netstat -tulpn | grep 8089
# Завершить процесс
kill -9 <PID>
```

### База данных заблокирована
```bash
# Проверить блокировки
lsof security.db
# Перезапустить систему
```

### Проблемы с производительностью
1. Проверьте использование ресурсов
2. Очистите старые логи
3. Оптимизируйте базу данных
"""
        
        with open(os.path.join(self.docs_dir, "deployment.md"), 'w', encoding='utf-8') as f:
            f.write(deployment_doc)
    
    def generate_user_manual(self):
        """Генерация руководства пользователя"""
        user_manual = """# Руководство пользователя

## Вход в систему

1. Откройте браузер и перейдите по адресу: `http://localhost:8089`
2. Введите учетные данные:
   - **Логин**: director
   - **Пароль**: admin2024
3. Нажмите "Войти в Систему"

## Панель управления

### Системные метрики
- **CPU**: Загрузка процессора в процентах
- **Память**: Использование оперативной памяти
- **Диск**: Использование дискового пространства

### Управление сервисами
- **Статус сервисов**: Отображение состояния всех агентов
- **Перезапуск**: Перезапуск всех сервисов системы
- **Аварийная остановка**: Экстренное отключение системы

### Управление проектами
- **Менеджер проектов**: Управление строительными проектами
- **Финансы**: Финансовый учет и отчетность
- **Кадры**: Управление персоналом

### Аналитика
- **Активные проекты**: Количество текущих проектов
- **Общая выручка**: Финансовые показатели
- **Создать отчет**: Генерация аналитических отчетов

### Команда
- **Онлайн сотрудники**: Количество активных пользователей
- **Активные задачи**: Текущие рабочие задачи
- **Назначить агента**: Назначение агентов сотрудникам

### Безопасность
- **Статус защиты**: Состояние системы безопасности
- **Создать бэкап**: Резервное копирование данных
- **Журнал аудита**: Просмотр логов безопасности

## Чат с агентами

### Доступ к чату
- Нажмите кнопку 💬 в правом нижнем углу
- Или перейдите по ссылке `/chat`

### Выбор агента
1. Выберите агента из выпадающего списка:
   - 🏗️ **Строительный менеджер**: Управление проектами и материалами
   - 💰 **Бухгалтерский агент**: Финансовый учет и отчетность
   - 👥 **HR агент**: Управление персоналом
   - 📊 **Аналитический агент**: Анализ данных и отчеты
   - 🔒 **Агент безопасности**: Мониторинг и защита

### Отправка сообщений
1. Введите сообщение в поле ввода
2. Нажмите "Отправить" или клавишу Enter
3. Получите ответ от выбранного агента

### Загрузка истории
- Нажмите "📂 Загрузить Чат" для просмотра предыдущих сообщений

## Назначение агентов персоналу

1. В карточке "Команда" нажмите "Назначить Агента"
2. Выберите сотрудника из списка
3. Выберите агента для назначения
4. Установите уровень доступа:
   - **Чтение**: Только просмотр данных
   - **Чтение + Запись**: Создание и изменение
   - **Полный доступ**: Все операции
5. Нажмите "Назначить Агента"

## Безопасность

### Выход из системы
- Нажмите кнопку "Выйти" в правом верхнем углу
- Подтвердите выход из системы

### Смена пароля
1. Обратитесь к системному администратору
2. Или используйте функцию восстановления пароля

### Рекомендации
- Не передавайте учетные данные третьим лицам
- Всегда выходите из системы после работы
- Сообщайте о подозрительной активности
"""
        
        with open(os.path.join(self.docs_dir, "user_manual.md"), 'w', encoding='utf-8') as f:
            f.write(user_manual)
    
    def generate_all_docs(self):
        """Генерация всей документации"""
        print("📚 Генерация документации...")
        
        self.generate_api_docs()
        print("✅ API документация создана")
        
        self.generate_security_docs()
        print("✅ Документация по безопасности создана")
        
        self.generate_deployment_docs()
        print("✅ Руководство по развертыванию создано")
        
        self.generate_user_manual()
        print("✅ Руководство пользователя создано")
        
        # Создание индексного файла
        index_content = """# Документация системы управления директора

## Содержание

1. [Руководство пользователя](user_manual.md) - Как использовать систему
2. [Руководство по развертыванию](deployment.md) - Установка и настройка
3. [Документация по безопасности](security.md) - Меры безопасности
4. [API документация](api_documentation.json) - Описание API

## Быстрый старт

1. Запустите систему: `python simple_director_server.py`
2. Откройте браузер: `http://localhost:8089`
3. Войдите: director / admin2024

## Поддержка

Для получения поддержки обратитесь к системному администратору.

---
*Документация сгенерирована автоматически: {}*
""".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        
        with open(os.path.join(self.docs_dir, "README.md"), 'w', encoding='utf-8') as f:
            f.write(index_content)
        
        print(f"📁 Документация сохранена в: {self.docs_dir}")
        print("🎉 Генерация документации завершена!")

if __name__ == "__main__":
    generator = DocumentationGenerator()
    generator.generate_all_docs()