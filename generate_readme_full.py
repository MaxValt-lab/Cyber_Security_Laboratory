#!/usr/bin/env python3
import os
from pathlib import Path
import sys

# –ï—Å–ª–∏ –ø—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ; –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
if len(sys.argv) > 1:
    ROOT_DIR = Path(sys.argv[1]).resolve()
else:
    ROOT_DIR = Path(__file__).resolve().parent

OUTPUT_FILE = ROOT_DIR / "README.md"

IGNORE = {".git", "__pycache__", ".idea", ".vscode", "node_modules", ".pytest_cache"}

# –û–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
DESCRIPTIONS = {
    "compliance": "–í–Ω–µ—à–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–§–°–¢–≠–ö, –§–°–ë, –ú–í–î, –ì–û–°–¢).",
    "deployment": "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∫–æ–¥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (Terraform, Ansible, Docker, K8s).",
    "observability": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å (Prometheus, Grafana, ELK).",
    "secrets": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞–º–∏: —à–∞–±–ª–æ–Ω—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞.",
    "third_party": "–°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: SDK –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.",
    "security": "–ü–æ–ª–∏—Ç–∏–∫–∏ –ò–ë, —Å–∫–∞–Ω—ã, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
    "examples": "–ü—Ä–∏–º–µ—Ä—ã –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: quickstart –∏ –¥–µ–º–æ.",
    "common": "–û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ–¥, —Ç–µ—Å—Ç—ã, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è).",
    "vision-le": "–†–∞–∑–Ω—ã–µ —Ä–µ–¥–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (Lite, Base, Pro¬≤, Pro¬≥).",
    "collaboration": "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã (—á–∞—Ç).",
    "tools": "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã.",
    "ci": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CI/CD (GitLab, Jenkins, Azure).",
    "docs": "–û–±—â–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –≥–∞–π–¥—ã.",
}

PROJECT_DESCRIPTION = """**Cyber_Security_Laboratory** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –∫–∏–±–µ—Ä–∑–∞—â–∏—Ç—É –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å.

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è:
- üè¢ –û—Ö—Ä–∞–Ω—ã –ø–æ–º–µ—â–µ–Ω–∏–π —Å –º–∞—Å—Å–æ–≤—ã–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ–º –ª—é–¥–µ–π.
- üåê –ó–∞—â–∏—Ç—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤.
- üïµÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–µ–π Darknet.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- üëÅ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
- üö∂ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∏ —Å–∫–æ–ø–ª–µ–Ω–∏–π –ª—é–¥–µ–π.
- üñ• –ó–∞—â–∏—Ç–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤.
- üåê Darknet-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.
- üì° DevSecOps –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.
- üßæ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤ (–§–°–¢–≠–ö, –§–°–ë, –ì–û–°–¢, –ú–í–î).
"""

def build_tree(path: Path, prefix: str = "") -> str:
    entries = sorted([e for e in path.iterdir() if e.name not in IGNORE],
                     key=lambda x: (x.is_file(), x.name.lower()))
    tree = ""
    for i, entry in enumerate(entries):
        connector = "‚îî‚îÄ‚îÄ " if i == len(entries) - 1 else "‚îú‚îÄ‚îÄ "
        tree += f"{prefix}{connector}{entry.name}\n"
        if entry.is_dir():
            extension = "    " if i == len(entries) - 1 else "‚îÇ   "
            tree += build_tree(entry, prefix + extension)
    return tree

def build_mermaid(path: Path, prefix: str = "  ") -> str:
    entries = sorted([e for e in path.iterdir() if e.name not in IGNORE],
                     key=lambda x: (x.is_file(), x.name.lower()))
    diagram = ""
    for entry in entries:
        diagram += f"{prefix}{entry.name}\n"
        if entry.is_dir():
            diagram += build_mermaid(entry, prefix + "  ")
    return diagram

def create_readmes():
    for folder, desc in DESCRIPTIONS.items():
        dir_path = ROOT_DIR / folder
        if dir_path.exists() and dir_path.is_dir():
            readme_path = dir_path / "README.md"
            if not readme_path.exists():
                with open(readme_path, "w", encoding="utf-8") as f:
                    f.write(f"# {folder}/\n\n{desc}\n")
                print(f"[OK] –°–æ–∑–¥–∞–Ω {readme_path}")

def main():
    tree = build_tree(ROOT_DIR)
    mermaid = "```mermaid\nmindmap\n  root((Cyber_Security_Laboratory))\n"
    mermaid += build_mermaid(ROOT_DIR, "    ")
    mermaid += "```\n"

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(f"# üõ° Cyber_Security_Laboratory\n\n")
        f.write(f"{PROJECT_DESCRIPTION}\n\n")
        f.write("## üóÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n")
        f.write("### –î–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞\n```\n")
        f.write(f"{ROOT_DIR.name}/\n")
        f.write(tree)
        f.write("```\n\n")
        f.write("### Mindmap (Mermaid)\n")
        f.write(mermaid + "\n")
        f.write("### üìñ –û–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π\n\n")
        f.write("| –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ |\n")
        f.write("|------------|------------|\n")
        for folder, desc in DESCRIPTIONS.items():
            f.write(f"| `{folder}/` | {desc} |\n")

    print(f"[OK] –ì–ª–∞–≤–Ω—ã–π README —Å–æ–∑–¥–∞–Ω –≤ {OUTPUT_FILE}")
    create_readmes()

if __name__ == "__main__":
    main()
