"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
"""
import unittest
import sqlite3
import os
import json
from datetime import datetime
from enhanced_security import enhanced_security

class TestEnhancedSecurity(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∞–º"""
        if os.path.exists('security.db'):
            os.remove('security.db')
        enhanced_security.setup_database()
    
    def test_password_hashing(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""
        password = "test123"
        salt = "testsalt"
        hash1 = enhanced_security._hash_password(password, salt)
        hash2 = enhanced_security._hash_password(password, salt)
        self.assertEqual(hash1, hash2)
        
        # –†–∞–∑–Ω—ã–µ —Å–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ö–µ—à–∏
        hash3 = enhanced_security._hash_password(password, "differentsalt")
        self.assertNotEqual(hash1, hash3)
    
    def test_authentication_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        result = enhanced_security.authenticate("director", "admin2024", "127.0.0.1", "TestAgent")
        self.assertTrue(result["success"])
        self.assertIn("session_token", result)
    
    def test_authentication_failure(self):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        result = enhanced_security.authenticate("director", "wrongpassword", "127.0.0.1", "TestAgent")
        self.assertFalse(result["success"])
    
    def test_session_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏"""
        auth_result = enhanced_security.authenticate("director", "admin2024", "127.0.0.1", "TestAgent")
        session_token = auth_result["session_token"]
        
        session_data = enhanced_security.validate_session(session_token)
        self.assertIsNotNone(session_data)
        self.assertEqual(session_data["username"], "director")
    
    def test_data_encryption(self):
        """–¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        original_data = "–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        encrypted = enhanced_security.encrypt_data(original_data)
        decrypted = enhanced_security.decrypt_data(encrypted)
        
        self.assertNotEqual(original_data, encrypted)
        self.assertEqual(original_data, decrypted)
    
    def test_audit_logging(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–∞"""
        enhanced_security.log_audit(1, "test_action", "test_resource", "127.0.0.1", "TestAgent", True, "Test details")
        
        audit_log = enhanced_security.get_audit_log(1)
        self.assertEqual(len(audit_log), 1)
        self.assertEqual(audit_log[0]["action"], "test_action")

class TestSystemIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_database_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.assertTrue(os.path.exists('security.db'))
        
        conn = sqlite3.connect('security.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        expected_tables = ['users', 'audit_log', 'sessions']
        for table in expected_tables:
            self.assertIn(table, tables)
        
        conn.close()
    
    def test_default_admin_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        conn = sqlite3.connect('security.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT username, role FROM users WHERE username = 'director'")
        result = cursor.fetchone()
        
        self.assertIsNotNone(result)
        self.assertEqual(result[0], "director")
        self.assertEqual(result[1], "admin")
        
        conn.close()

class TestPerformance(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_authentication_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        import time
        
        start_time = time.time()
        for i in range(10):
            enhanced_security.authenticate("director", "admin2024", "127.0.0.1", "TestAgent")
        end_time = time.time()
        
        avg_time = (end_time - start_time) / 10
        self.assertLess(avg_time, 1.0)  # –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    
    def test_encryption_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        import time
        
        data = "Test data for encryption" * 100
        
        start_time = time.time()
        for i in range(100):
            encrypted = enhanced_security.encrypt_data(data)
            enhanced_security.decrypt_data(encrypted)
        end_time = time.time()
        
        avg_time = (end_time - start_time) / 100
        self.assertLess(avg_time, 0.1)  # –ú–µ–Ω–µ–µ 0.1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    test_suite.addTest(unittest.makeSuite(TestEnhancedSecurity))
    test_suite.addTest(unittest.makeSuite(TestSystemIntegration))
    test_suite.addTest(unittest.makeSuite(TestPerformance))
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"üö´ –û—à–∏–±–∫–∏: {len(result.errors)}")
    print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%")
    
    if result.failures:
        print("\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:")
        for test, traceback in result.failures:
            print(f"- {test}: {traceback.split('AssertionError: ')[-1].split('\\n')[0]}")
    
    if result.errors:
        print("\nüö´ –û–®–ò–ë–ö–ò:")
        for test, traceback in result.errors:
            print(f"- {test}: {traceback.split('\\n')[-2]}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")